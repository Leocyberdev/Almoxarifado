#!/usr/bin/env python3
"""
Script melhorado para inicializar o banco de dados no Render
Inclui valida√ß√µes robustas e cria√ß√£o de dados essenciais
"""

import os
import sys

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(__file__))

from flask_migrate import upgrade
from src.main import app
from src.models.user import db, User
from src.models.almoxarifado import Funcionario, Categoria, Fornecedor, Obra

def criar_usuario_admin():
    """Cria usu√°rio admin master se n√£o existir"""
    try:
        admin_user = User.query.filter_by(username="Monter").first()
        if not admin_user:
            admin_user = User(
                username="Monter",
                email="admin@sistema.com",
                tipo_usuario="almoxarifado",
                ativo=True
            )
            admin_user.set_password("almox")
            db.session.add(admin_user)
            db.session.commit()
            print("‚úÖ Usu√°rio admin master criado: Monter / almox")
        else:
            print("‚ÑπÔ∏è  Usu√°rio admin j√° existe")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio admin: {e}")
        return False

def criar_funcionario_sistema():
    """Cria funcion√°rio padr√£o do sistema se n√£o existir"""
    try:
        funcionario_sistema = Funcionario.query.filter_by(nome="Sistema").first()
        if not funcionario_sistema:
            funcionario_sistema = Funcionario(
                nome="Sistema",
                cargo="Operador do Sistema",
                ativo=True
            )
            db.session.add(funcionario_sistema)
            db.session.commit()
            print("‚úÖ Funcion√°rio Sistema criado")
        else:
            print("‚ÑπÔ∏è  Funcion√°rio Sistema j√° existe")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar funcion√°rio Sistema: {e}")
        return False

def criar_dados_basicos():
    """Cria categorias, fornecedores e obras b√°sicas se n√£o existirem"""
    try:
        # Categorias b√°sicas
        categorias_basicas = [
            {"nome": "Geral", "descricao": "Categoria geral para produtos diversos"},
            {"nome": "El√©trico", "descricao": "Materiais el√©tricos"},
            {"nome": "Mec√¢nico", "descricao": "Materiais mec√¢nicos"}
        ]
        
        for cat_data in categorias_basicas:
            categoria = Categoria.query.filter_by(nome=cat_data["nome"]).first()
            if not categoria:
                categoria = Categoria(
                    nome=cat_data["nome"],
                    descricao=cat_data["descricao"],
                    ativa=True
                )
                db.session.add(categoria)
        
        # Fornecedor padr√£o
        fornecedor_padrao = Fornecedor.query.filter_by(nome="Fornecedor Padr√£o").first()
        if not fornecedor_padrao:
            fornecedor_padrao = Fornecedor(
                nome="Fornecedor Padr√£o",
                ativo=True
            )
            db.session.add(fornecedor_padrao)
        
        # Obra padr√£o
        obra_padrao = Obra.query.filter_by(nome_obra="Obra Padr√£o").first()
        if not obra_padrao:
            obra_padrao = Obra(
                numero_obra="0000",
                nome_obra="Obra Padr√£o",
                descricao="Obra padr√£o para aloca√ß√µes gerais",
                ativa=True,
                status="Em Andamento"
            )
            db.session.add(obra_padrao)
        
        db.session.commit()
        print("‚úÖ Dados b√°sicos criados/verificados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar dados b√°sicos: {e}")
        db.session.rollback()
        return False

def verificar_integridade_banco():
    """Verifica a integridade b√°sica do banco de dados"""
    try:
        # Verificar se as tabelas principais existem
        from sqlalchemy import inspect
        insp = inspect(db.engine)
        tabelas_necessarias = ['users', 'funcionarios', 'categorias', 'fornecedores', 'obras', 'produtos', 'movimentacoes']
        tabelas_existentes = insp.get_table_names()
        
        tabelas_faltando = [t for t in tabelas_necessarias if t not in tabelas_existentes]
        if tabelas_faltando:
            print(f"‚ö†Ô∏è  Tabelas faltando: {tabelas_faltando}")
            return False
        
        # Verificar se h√° pelo menos um usu√°rio admin
        admin_count = User.query.filter_by(tipo_usuario="almoxarifado").count()
        if admin_count == 0:
            print("‚ö†Ô∏è  Nenhum usu√°rio admin encontrado")
            return False
        
        # Verificar se h√° funcion√°rio Sistema
        funcionario_sistema = Funcionario.query.filter_by(nome="Sistema").first()
        if not funcionario_sistema:
            print("‚ö†Ô∏è  Funcion√°rio Sistema n√£o encontrado")
            return False
        
        print("‚úÖ Integridade do banco verificada")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar integridade: {e}")
        return False

def init_render_db():
    """Inicializa o banco de dados no Render com valida√ß√µes robustas"""
    with app.app_context():
        try:
            print("üöÄ Iniciando configura√ß√£o do banco de dados...")
            
            # 1. Aplicar migra√ß√µes
            print("üì¶ Aplicando migra√ß√µes...")
            upgrade()
            print("‚úÖ Migra√ß√µes aplicadas com sucesso!")
            
            # 2. Criar usu√°rio admin
            if not criar_usuario_admin():
                print("‚ùå Falha ao criar usu√°rio admin")
                return False
            
            # 3. Criar funcion√°rio sistema
            if not criar_funcionario_sistema():
                print("‚ùå Falha ao criar funcion√°rio sistema")
                return False
            
            # 4. Criar dados b√°sicos
            if not criar_dados_basicos():
                print("‚ùå Falha ao criar dados b√°sicos")
                return False
            
            # 5. Verificar integridade
            if not verificar_integridade_banco():
                print("‚ùå Falha na verifica√ß√£o de integridade")
                return False
            
            print("\nüéâ Banco de dados inicializado com sucesso!")
            print("üìã Resumo:")
            print(f"   - Usu√°rios: {User.query.count()}")
            print(f"   - Funcion√°rios: {Funcionario.query.count()}")
            print(f"   - Categorias: {Categoria.query.count()}")
            print(f"   - Fornecedores: {Fornecedor.query.count()}")
            print(f"   - Obras: {Obra.query.count()}")
            
            return True
            
        except Exception as e:
            print(f"üí• Erro cr√≠tico durante inicializa√ß√£o: {e}")
            return False

if __name__ == '__main__':
    sucesso = init_render_db()
    if not sucesso:
        sys.exit(1)
    print("\n‚ú® Inicializa√ß√£o conclu√≠da com sucesso!")

