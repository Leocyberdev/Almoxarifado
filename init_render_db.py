
#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do banco para Render
Configura PostgreSQL e migra dados do SQLite se necess√°rio
"""

import os
import sys

# Configura ambiente de produ√ß√£o
os.environ["FLASK_ENV"] = "production"

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(__file__))

def init_render_database():
    """Inicializa o banco de dados no Render"""
    print("üöÄ Inicializando banco de dados no Render...")
    
    # Verifica se a vari√°vel DATABASE_URL est√° definida
    database_url = os.environ.get("DATABASE_URL")
    if not database_url:
        print("‚ùå Erro: Vari√°vel DATABASE_URL n√£o est√° definida!")
        print("Configure a vari√°vel DATABASE_URL no Render com a string de conex√£o do PostgreSQL")
        sys.exit(1)
    
    print(f"üìä Conectando ao banco: {database_url[:50]}...")
    
    try:
        # Importa e cria a aplica√ß√£o
        from src.main import create_app
        from src.models.user import db
        
        app = create_app("production")
        
        with app.app_context():
            print("üìä Entrando no contexto da aplica√ß√£o...")
            
            # Testa a conex√£o primeiro
            try:
                db.engine.execute("SELECT 1")
                print("‚úÖ Conex√£o com banco de dados estabelecida!")
            except Exception as conn_error:
                print(f"‚ùå Erro de conex√£o com banco: {conn_error}")
                raise
            
            print("üìä Criando todas as tabelas...")
            # db.create_all() # Comentar para evitar recria√ß√£o em cada deploy
            # print("‚úÖ Tabelas criadas (ou j√° existentes)!")
            
            # Verifica se existem dados
            from src.models.user import User
            user_count = User.query.count()
            print(f"Contagem inicial de usu√°rios: {user_count}")
            
            if user_count == 0:
                print("üì¶ Banco vazio. Tentando migrar dados do SQLite ou criar dados padr√£o...")
                
                # Tenta migrar dados do SQLite
                try:
                    from src.migrate_to_postgres import migrate_data
                    print("Attempting data migration from SQLite...")
                    migrate_data()
                    print("Data migration completed.")
                except ImportError:
                    print("src.migrate_to_postgres not found, skipping migration.")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na migra√ß√£o (criando dados padr√£o): {e}")
                    
                # Se a migra√ß√£o falhar ou n√£o existir, cria dados padr√£o
                from src.main import init_default_data
                print("Chamando init_default_data()...")
                init_default_data()
                print("init_default_data() conclu√≠do.")
            else:
                print(f"‚úÖ Banco j√° cont√©m {user_count} usu√°rios. Pulando inicializa√ß√£o de dados padr√£o.")
                
            print("üéâ Inicializa√ß√£o do banco conclu√≠da!")
            
    except Exception as e:
        print(f"‚ùå Erro fatal ao inicializar banco: {e}")
        print("Verifique se:")
        print("1. A vari√°vel DATABASE_URL est√° corretamente configurada")
        print("2. O banco PostgreSQL est√° acess√≠vel")
        print("3. As credenciais est√£o corretas")
        sys.exit(1)

if __name__ == "__main__":
    init_render_database()


